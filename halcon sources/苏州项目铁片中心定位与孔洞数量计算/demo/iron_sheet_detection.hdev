<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="17.12">
<procedure name="main">
<interface/>
<body>
<l>dev_close_window ()</l>
<l>*dev_update_window ('off')</l>
<c></c>
<c></c>
<l>for pictrue_count:=1 to 223 by 1</l>
<l>read_image (Image, 'C:/Users/acer/Desktop/halcon_project/images/Cap_RuiShi/'+pictrue_count+'.jpeg')</l>
<l>*read_image (Image, 'C:/Users/acer/Desktop/halcon_project/images/Cap_RuiShi/7Holes/'+pictrue_count+'.jpeg')</l>
<c>   </c>
<l>*read_image (Image, 'C:/Users/acer/Desktop/halcon_project/images/Cap_RuiShi/'+pictrue_count+'.bmp')</l>
<c></c>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_display (Image)</l>
<c></c>
<l>median_image (Image, ImageMedian, 'circle', 1, 'mirrored')</l>
<c></c>
<c></c>
<l>fast_threshold (ImageMedian, Region, 120, 255, 20)</l>
<c></c>
<l>boundary (Region, RegionBorder, 'inner')</l>
<c></c>
<l>*clip_region_rel (RegionBorder, RegionClipped1, 5, 5, 5, 5)</l>
<c></c>
<l>dilation_circle (RegionBorder, RegionDilation, 5)</l>
<l>reduce_domain (ImageMedian, RegionDilation, ImageReduced)</l>
<c></c>
<c></c>
<l>edges_sub_pix (ImageReduced, Edges1, 'canny', 0.5, 20, 60)</l>
<c></c>
<l>* dev_clear_window ()</l>
<l>* dev_display (Edges1)</l>
<c></c>
<l>segment_contours_xld (Edges1, ContoursSplit, 'lines_circles', 5, 4, 2)</l>
<c></c>
<l>dev_display (Image)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_color ('red')</l>
<c></c>
<c>*第一个铁片的参数</c>
<l>Row_center1 := []</l>
<l>Column_center1 := []</l>
<l>Radius_center1 := []</l>
<l>count1 := 0</l>
<c></c>
<c>*第二个铁片的参数</c>
<l>Row_center2 := []</l>
<l>Column_center2 := []</l>
<l>Radius_center2 := []</l>
<l>count2 := 0</l>
<c></c>
<l>Row := 0</l>
<l>Column := 0</l>
<l>pre_Row := 0</l>
<l>pre_Cloumn := 0</l>
<c>*上一个圆检测的编号</c>
<l>label := 1</l>
<c></c>
<l>count_obj (ContoursSplit, Number)</l>
<l>for i:=1 to Number by 1</l>
<l>    select_obj (ContoursSplit, ObjectSelected, i)</l>
<l>    get_contour_global_attrib_xld (ObjectSelected, 'cont_approx', Attrib)</l>
<l>    if(Attrib &gt; 0)</l>
<l>        fit_circle_contour_xld (ObjectSelected, 'ahuber', -1, 0, 0, 3, 2, Row, Column, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>*        gen_circle_contour_xld (ContCircle, Row, Column, Radius, 0, 6.28318, 'positive', 1)</l>
<l>*         dev_display (ContCircle)</l>
<c>        *先判断检测的圆半径是否为铁片的半径</c>
<l>        if( Radius&gt;112 and Radius&lt;118 )</l>
<c>            *计算上点圆心和当前圆心的距离是否大于半径，大于110则为第二个铁片,距离小于20则为同一个铁片。</c>
<c>            *因为第一次检测上点圆心为(0,0)，所以需要第一次检测要设为第一个铁片</c>
<l>             if( pre_Row==0 and pre_Cloumn==0 )</l>
<l>                 pre_Row := Row</l>
<l>                 pre_Cloumn := Column</l>
<l>                 Row_center1[count1] := Row</l>
<l>                 Column_center1[count1] := Column</l>
<l>                 Radius_center1[count1] := Radius</l>
<l>                 count1 := count1 + 1</l>
<l>                 label := 1</l>
<l>                 continue</l>
<l>             else</l>
<l>                distance_pp (Row, Column, pre_Row, pre_Cloumn,Distance)</l>
<l>                pre_Row := Row</l>
<l>                pre_Cloumn := Column</l>
<c>                *上一个检测的圆心为第一个铁片</c>
<l>                if( label == 1 )</l>
<l>                    if( Distance&lt;20 )</l>
<l>                        Row_center1[count1] := Row</l>
<l>                        Column_center1[count1] := Column</l>
<l>                        Radius_center1[count1] := Radius</l>
<l>                        count1 := count1 + 1</l>
<l>                        label := 1</l>
<l>                    elseif( Distance&gt;110 )</l>
<l>                        Row_center2[count2] := Row</l>
<l>                        Column_center2[count2] := Column</l>
<l>                        Radius_center2[count2] := Radius</l>
<l>                        count2 := count2 + 1</l>
<l>                        label := 2</l>
<l>                    endif</l>
<c>                *上一个检测的圆心为第二个铁片</c>
<l>                elseif(label == 2)</l>
<l>                    if( Distance&lt;20 )</l>
<l>                        Row_center2[count2] := Row</l>
<l>                        Column_center2[count2] := Column</l>
<l>                        Radius_center2[count2] := Radius</l>
<l>                        count2 := count2 + 1</l>
<l>                        label := 2</l>
<l>                    elseif( Distance&gt;110 )</l>
<l>                        Row_center1[count1] := Row</l>
<l>                        Column_center1[count1] := Column</l>
<l>                        Radius_center1[count1] := Radius</l>
<l>                        count1 := count1 + 1</l>
<l>                        label := 1</l>
<l>                    endif</l>
<l>                endif</l>
<l>             endif</l>
<l>        endif</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_set_colored (12)</l>
<l>dev_set_line_width (3)</l>
<l>dev_display (Image)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c></c>
<c>*把得到的圆心和半径取平均，可减少误差。</c>
<l>if(Radius_center1 &gt; 0)</l>
<l>    tuple_mean (Row_center1,Row_center_mean1)</l>
<l>    tuple_mean (Column_center1,Column_center_mean1)</l>
<l>    tuple_mean (Radius_center1,Radius_center_mean1)</l>
<c>    </c>
<l>    gen_cross_contour_xld (Cross1, Row_center_mean1, Column_center_mean1, 20, 0.785398)</l>
<l>*    gen_circle (Circle1, Row_center_mean1, Column_center_mean1, Radius_center_mean1)</l>
<c>    </c>
<c>*孔洞数量识别模块</c>
<l>    gen_circle (Circle1, Row_center_mean1, Column_center_mean1, Radius_center_mean1/2)</l>
<l>    reduce_domain (ImageMedian, Circle1, ImageReduced1)</l>
<c>    </c>
<l>    median_image (ImageReduced1, ImageMedian1, 'circle', 5, 'mirrored')</l>
<l>    dyn_threshold (ImageReduced1, ImageMedian1, RegionDynThresh1, 16, 'dark')</l>
<c>    </c>
<l>    connection (RegionDynThresh1, ConnectedRegion1_1)</l>
<l>    select_shape (ConnectedRegion1_1, SelectedRegion1_1, 'area', 'and', 5, 200)</l>
<l>    union1 (SelectedRegion1_1, RegionUnion1)</l>
<l>    closing_circle (RegionUnion1, RegionClosing1, 3.5)</l>
<l>    fill_up (RegionClosing1, RegionFillUp1)</l>
<c></c>
<l>    connection (RegionFillUp1, ConnectedRegion1)</l>
<l>    select_shape (ConnectedRegion1, SelectedRegion1, ['outer_radius','area'], 'and', [3,21], [9.5,110])</l>
<l>    count_obj (SelectedRegion1, Number1)</l>
<l>*     stop()</l>
<c>*显示模块</c>
<l>    dev_display (Image)</l>
<l>    gen_circle (Circle2, Row_center_mean1, Column_center_mean1, Radius_center_mean1)</l>
<l>    dev_display(Circle2)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_display (Cross1)</l>
<l>    disp_message (WindowHandle, '1', 'window', Row_center_mean1-120, Column_center_mean1-75, 'blue', 'false')</l>
<l>    disp_message (WindowHandle, 'The center and hole number of No.1 iron sheet:'+'('+Row_center_mean1+','+Column_center_mean1+')'+' , '+Number1, 'window', 680, 30, 'black', 'true')</l>
<l>endif</l>
<c></c>
<c></c>
<l>if(Radius_center2 &gt; 0)</l>
<l>    tuple_mean (Row_center2,Row_center_mean2)</l>
<l>    tuple_mean (Column_center2,Column_center_mean2)</l>
<l>    tuple_mean (Radius_center2,Radius_center_mean2)</l>
<c>    </c>
<l>    gen_cross_contour_xld (Cross2, Row_center_mean2, Column_center_mean2, 20, 0.785398)</l>
<l>    *gen_circle (Circle2, Row_center_mean2, Column_center_mean2, Radius_center_mean2)</l>
<c>*孔洞识别模块</c>
<l>    gen_circle (Circle3, Row_center_mean2, Column_center_mean2, Radius_center_mean2/2)</l>
<l>    reduce_domain (ImageMedian, Circle3, ImageReduced2)</l>
<c>    </c>
<l>    median_image (ImageReduced2, ImageMedian2, 'circle', 5, 'mirrored')</l>
<l>    dyn_threshold (ImageReduced2, ImageMedian2, RegionDynThresh2, 20, 'dark')</l>
<c>    </c>
<l>    connection (RegionDynThresh1, ConnectedRegion2_1)</l>
<l>    select_shape (ConnectedRegion2_1, SelectedRegion2_1, 'area', 'and', 5, 200)</l>
<l>    union1 (SelectedRegion2_1, RegionUnion2)</l>
<l>    closing_circle (RegionUnion2, RegionClosing2, 2)</l>
<l>    fill_up (RegionClosing2, RegionFillUp2)</l>
<c></c>
<l>    connection (RegionFillUp2, ConnectedRegion2)</l>
<l>    select_shape (ConnectedRegion2, SelectedRegion2, ['outer_radius','area'], 'and', [3,21], [9.5,110])</l>
<l>    count_obj (SelectedRegion2, Number2)</l>
<l>*     stop()</l>
<c>*显示模块</c>
<l>    dev_display (Image)</l>
<l>    dev_set_color ('red')</l>
<l>    gen_circle (Circle2, Row_center_mean1, Column_center_mean1, Radius_center_mean1)</l>
<l>    dev_display(Circle2)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_display (Cross1)</l>
<l>    disp_message (WindowHandle, '1', 'window', Row_center_mean1-120, Column_center_mean1-75, 'blue', 'false')</l>
<l>    disp_message (WindowHandle, 'The center and hole number of No.1 iron sheet:'+'('+Row_center_mean1+','+Column_center_mean1+')'+' , '+Number1, 'window', 680, 30, 'black', 'true')</l>
<c>    </c>
<l>    gen_circle (Circle4, Row_center_mean2, Column_center_mean2, Radius_center_mean2)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display(Circle4)</l>
<l>    dev_set_color ('yellow')</l>
<l>    dev_display (Cross2)</l>
<l>    disp_message (WindowHandle, '2', 'window', Row_center_mean2-120, Column_center_mean2-75, 'blue', 'false')</l>
<l>    disp_message (WindowHandle, 'The center and hole number of No.2 iron sheet:'+'('+Row_center_mean2+','+Column_center_mean2+')'+' , '+Number2, 'window', 710, 30, 'black', 'true')</l>
<l>endif</l>
<c></c>
<l>disp_message (WindowHandle, 'Picture Name: '+pictrue_count+'.jpeg', 'window', 30, 30, 'black', 'true')</l>
<l>stop()</l>
<l>endfor</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
