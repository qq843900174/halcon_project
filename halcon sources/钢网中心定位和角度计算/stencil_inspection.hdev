<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="17.12">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l>dev_close_window ()</l>
<l>* dev_open_window (0, 0, 458, 706, 'black', WindowHandle)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">* list_files ('C:/Users/acer/Desktop/halcon_project/images/mid', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">* tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">* for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">*     read_image (Image, ImageFiles[Index])</l>
<l>for picture_name := 1 to 64 by 1</l>
<l>    read_image (Image, 'C:/Users/acer/Desktop/halcon_project/images/mid/'+picture_name)</l>
<l>    get_image_size (Image, Width, Height)</l>
<l>    dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<l>    threshold (Image, Region, 100, 255)</l>
<l>    connection (Region, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, ['area','row1'], 'and', [30,200], [99999,350])</l>
<l>    union1 (SelectedRegions, RegionUnion)</l>
<c>    </c>
<l>    closing_circle (RegionUnion, RegionClosing, 7)</l>
<l>    connection (RegionClosing, ConnectedRegions1)</l>
<c>    </c>
<l>    select_shape (ConnectedRegions1, SelectedRegions1, 'area', 'and', 150, 99999)</l>
<l>    union1 (SelectedRegions1, RegionUnion1)</l>
<l>    count_obj (RegionUnion1, Number)</l>
<l>    if ( Number #0 ) </l>
<l>        dev_display (Image)</l>
<l>        dev_set_color ('green')</l>
<l>        dev_display (RegionUnion)</l>
<l>        smallest_rectangle2 (RegionUnion1, Row, Column, Phi, Length1, Length2)</l>
<l>        dev_set_draw ('margin')</l>
<l>        gen_rectangle2 (Rectangle, Row, Column, Phi, Length1, Length2)</l>
<l>        gen_cross_contour_xld (Cross, Row, Column, 1000, 0)</l>
<l>        dev_set_color ('red')</l>
<l>        dev_display (Cross)</l>
<c>        </c>
<c>        *生成ROI区域</c>
<l>        dev_clear_window ()</l>
<l>        reduce_domain (Image, RegionUnion1, ImageReduced)</l>
<l>        dev_display (ImageReduced)</l>
<l>        edges_sub_pix (ImageReduced, Edges, 'canny', 1, 30, 100)</l>
<l>        union_adjacent_contours_xld (Edges, UnionContours, 10, 1, 'attr_keep')</l>
<l>        select_contours_xld (UnionContours, SelectedContours, 'contour_length', 400, 99999, -0.5, 0.5)</l>
<l>        smallest_rectangle2_xld (SelectedContours, Row2, Column2, Phi1, Length11, Length21)</l>
<l>        gen_rectangle2_contour_xld (Rectangle1, Row2, Column2, Phi1, Length11, Length21)</l>
<l>        dev_clear_window ()</l>
<l>        dev_display (Image)</l>
<l>        dev_display (Rectangle1)</l>
<l>        stop()</l>
<c>        *计算钢网的质心，比较质心和得到的中心判断图形直边在左侧还是右侧</c>
<l>        area_center (RegionUnion1, Area, Row1, Column1)</l>
<l>        *gen_cross_contour_xld (Cross1, Row1, Column1, 1000, Phi)</l>
<l>        *dev_set_color ('yellow')</l>
<l>        *dev_display (Cross1)</l>
<c>        *钢网的质心在中心左边，则其直边在左侧。</c>
<l>        disp_message (WindowHandle, 'X:'+Row, 'window', 20, 20, 'green', 'false')</l>
<l>        disp_message (WindowHandle, 'Y:'+Column, 'window', 40, 20, 'green', 'false')</l>
<l>        if( Column1 &lt; Column )</l>
<l>            Angle := 180 + Phi</l>
<l>            disp_message (WindowHandle, 'Angle:'+Angle, 'window', 60, 20, 'green', 'false')</l>
<l>        else</l>
<l>            if( Phi &gt;= 0 )</l>
<l>                Angle := Phi</l>
<l>                disp_message (WindowHandle, 'Angle:'+Angle, 'window', 60, 20, 'green', 'false')</l>
<l>            else</l>
<l>                Angle := 360 + Phi</l>
<l>                disp_message (WindowHandle, 'Angle:'+Angle, 'window', 60, 20, 'green', 'false')</l>
<l>            endif</l>
<l>        endif</l>
<l>    else</l>
<l>        dev_display (Image)</l>
<l>        disp_message (WindowHandle, 'This picture is NG', 'window', 20, 20, 'red', 'false')</l>
<l>    endif</l>
<l>    stop()</l>
<l>endfor</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">* endfor</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
